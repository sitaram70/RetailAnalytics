name: CI

on:
  push:
  pull_request:

jobs:
  smoke:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      # Use your requirements if present
      - name: Install dependencies (requirements.txt)
        if: ${{ hashFiles('requirements.txt') != '' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # helpers for smoke tests (no-ops if already in reqs)
          pip install fastapi uvicorn[standard] requests pytest joblib

      # Fallback deps so the workflow passes even before code exists
      - name: Install minimal deps (fallback)
        if: ${{ hashFiles('requirements.txt') == '' }}
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn[standard] streamlit pandas numpy scikit-learn joblib requests

      - name: Prepare data (simulate if script exists, else tiny inline dataset)
        run: |
          set -e
          mkdir -p data/raw
          if [ -f "src/simulate_retail.py" ]; then
            python src/simulate_retail.py --out_dir data --start_date 2025-01-01 --days 30 --customers 200 --products 60 --stores 3
          else
            python - <<'PY'
            from pathlib import Path
            import pandas as pd
            raw = Path("data/raw"); raw.mkdir(parents=True, exist_ok=True)
            (raw/"products.csv").write_text("product_id,name,category,base_price\n1,Widget A,Cat1,10.0\n2,Widget B,Cat1,12.0\n", encoding="utf-8")
            (raw/"stores.csv").write_text("store_id,city,region,size_index\n1,Austin,South,2\n", encoding="utf-8")
            (raw/"visits.csv").write_text("date,store_id,visits\n2025-05-01,1,100\n2025-05-02,1,120\n", encoding="utf-8")
            (raw/"transactions.csv").write_text(
              "order_id,date,store_id,customer_id,product_id,quantity,unit_price,discount,revenue\n"
              "1,2025-05-01,1,10,1,2,10,0,20\n"
              "1,2025-05-01,1,10,2,1,12,0,12\n"
              "2,2025-05-02,1,11,1,1,10,0,10\n", encoding="utf-8"
            )
            PY
          fi

      - name: Preprocess (use script if present, else inline)
        run: |
          set -e
          if [ -f "src/preprocess_sales.py" ]; then
            python src/preprocess_sales.py --transactions data/raw/transactions.csv --visits data/raw/visits.csv --out data/raw/daily_sales.csv
          else
            python - <<'PY'
            import pandas as pd
            tx = pd.read_csv("data/raw/transactions.csv", parse_dates=["date"])
            vs = pd.read_csv("data/raw/visits.csv", parse_dates=["date"])
            d = (tx.groupby("date").agg(revenue=("revenue","sum"),
                                        orders=("order_id","nunique"),
                                        units=("quantity","sum"))
                      .reset_index())
            v = vs.groupby("date", as_index=False)["visits"].sum()
            d = d.merge(v, on="date", how="left")
            d["aov"] = d["revenue"]/d["orders"].clip(lower=1)
            d["conversion"] = d["orders"]/d["visits"].clip(lower=1)
            d.to_csv("data/raw/daily_sales.csv", index=False)
            PY
          fi

      - name: Import checks (if modules exist)
        run: |
          python - <<'PY'
          import importlib.util, sys, pathlib
          mods = ["src.api","src.train_models","streamlit_app.app"]
          for m in mods:
            path = pathlib.Path(m.replace(".","/") + ".py")
            if path.exists():
              import importlib; importlib.import_module(m); print("✅ imported", m)
            else:
              print("↷ skipped (missing)", m)
          PY

      - name: API smoke test (if api.py present)
        run: |
          if [ -f "src/api.py" ]; then
            python - <<'PY'
            import importlib.util
            from fastapi.testclient import TestClient
            spec = importlib.util.spec_from_file_location("api", "src/api.py")
            api = importlib.util.module_from_spec(spec); spec.loader.exec_module(api)
            client = TestClient(api.app)
            assert client.get("/health").status_code == 200
            r = client.get("/metrics/overview")
            assert r.status_code == 200, r.text
            print("API smoke OK:", r.json())
            PY
          else
            echo "↷ skipped API smoke (src/api.py not found)"
          fi

      - name: Show tree on failure
        if: failure()
        run: |
          ls -la
          ls -la data || true
          ls -la data/raw || true
